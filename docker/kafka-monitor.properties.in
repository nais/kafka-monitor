{
  "single-cluster-monitor": {
    "class.name": "com.linkedin.kmf.apps.SingleClusterMonitor",
    "topic": "${MONITOR_TOPIC}",
    "zookeeper.connect": "${ZOOKEEPER_CONNECT}",
    "bootstrap.servers": "${BOOTSTRAP_SERVERS}",
    "produce.record.delay.ms": ${PRODUCE_DELAY},
    "topic-management.topicCreationEnabled": ${CREATE_TOPIC},
    "topic-management.replicationFactor" : ${REPLICATION_FACTOR},
    "topic-management.partitionsToBrokersRatio" : ${PARTITIONS_TO_BROKERS_RATIO},
    "topic-management.rebalance.interval.ms" : 600000,
    "topic-management.topicFactory.props": {
    },
    "topic-management.topic.props": {
      "retention.ms": "3600000"
    },
    "produce.producer.props": {
      "client.id": "kmf-producer",
      "ssl.truststore.location": "${TRUSTSTORE_LOCATION}",
      "ssl.truststore.password": "${TRUSTSTORE_PASSWORD}",
      "security.protocol": "${SECURITY_PROTOCOL}",
      "sasl.mechanism": "${SASL_MECHANISM}",
      "sasl.jaas.config": "${JAAS_CONFIG}"
    },

    "consume.latency.sla.ms": "20000",
    "consume.consumer.props": {
      "client.id": "kmf-consumer",
      "ssl.truststore.location": "${TRUSTSTORE_LOCATION}",
      "ssl.truststore.password": "${TRUSTSTORE_PASSWORD}",
      "security.protocol": "${SECURITY_PROTOCOL}",
      "sasl.mechanism": "${SASL_MECHANISM}",
      "sasl.jaas.config": "${JAAS_CONFIG}"
    }

  },

  "jetty-service": {
    "class.name": "com.linkedin.kmf.services.JettyService",
    "jetty.port": 8000
  },

  "jolokia-service": {
    "class.name": "com.linkedin.kmf.services.JolokiaService"
  },


  "reporter-service": {
    "class.name": "com.linkedin.kmf.services.DefaultMetricsReporterService",
    "report.interval.sec": 1,
    "report.metrics.list": [
      "kmf:type=kafka-monitor:offline-runnable-count",
      "kmf.services:type=produce-service,name=*:produce-availability-avg",
      "kmf.services:type=consume-service,name=*:consume-availability-avg",
      "kmf.services:type=produce-service,name=*:records-produced-total",
      "kmf.services:type=consume-service,name=*:records-consumed-total",
      "kmf.services:type=consume-service,name=*:records-lost-total",
      "kmf.services:type=consume-service,name=*:records-duplicated-total",
      "kmf.services:type=consume-service,name=*:records-delay-ms-avg",
      "kmf.services:type=produce-service,name=*:records-produced-rate",
      "kmf.services:type=produce-service,name=*:produce-error-rate",
      "kmf.services:type=consume-service,name=*:consume-error-rate"
    ]
  }


#  Example statsd-service to report metrics
#  "statsd-service": {
#      "class.name": "com.linkedin.kmf.services.StatsdMetricsReporterService",
#      "report.statsd.host": "localhost",
#      "report.statsd.port": "8125",
#      "report.statsd.prefix": "kafka-monitor",
#      "report.interval.sec": 1,
#      "report.metrics.list": [
#      "kmf:type=kafka-monitor:offline-runnable-count",
#      "kmf.services:type=produce-service,name=*:produce-availability-avg",
#      "kmf.services:type=consume-service,name=*:consume-availability-avg"
#     ]
#  }


#  Example kafka-service to report metrics
#  "reporter-kafka-service": {
#    "class.name": "com.linkedin.kmf.services.KafkaMetricsReporterService",
#    "report.interval.sec": 3,
#    "zookeeper.connect": "localhost:2181",
#    "bootstrap.servers": "localhost:9092",
#    "topic": "kafka-monitor-topic-metrics",
#    "report.kafka.topic.replication.factor": 1,
#    "report.metrics.list": [
#      "kmf.services:type=produce-service,name=*:produce-availability-avg",
#      "kmf.services:type=consume-service,name=*:consume-availability-avg",
#      "kmf.services:type=produce-service,name=*:records-produced-total",
#      "kmf.services:type=consume-service,name=*:records-consumed-total",
#      "kmf.services:type=consume-service,name=*:records-lost-total",
#      "kmf.services:type=consume-service,name=*:records-duplicated-total",
#      "kmf.services:type=consume-service,name=*:records-delay-ms-avg",
#      "kmf.services:type=produce-service,name=*:records-produced-rate",
#      "kmf.services:type=produce-service,name=*:produce-error-rate",
#      "kmf.services:type=consume-service,name=*:consume-error-rate"
#    ]
#  }

#  Example signalfx-service to report metrics
# "signalfx-service": {
#   "class.name": "com.linkedin.kmf.services.SignalFxMetricsReporterService",
#   "report.interval.sec": 1,
#   "report.metric.dimensions": {
#   },
#   "report.signalfx.url": "",
#   "report.signalfx.token" : ""
# }

}


